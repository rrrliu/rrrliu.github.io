{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/header/header.js","webpack:///./src/components/layout.js"],"names":["UsingTypescript","data","path","title","site","buildTime","href","to","query","HeaderLink","children","activeStyle","fontWeight","Header","className","style","margin","textAlign","maxWidth","padding","Layout","siteTitle","siteMetadata"],"mappings":"6FAAA,0GAyCeA,UA5ByC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACtD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,qBACX,sEACA,uEAC2C,wCAD3C,+DAE8C,2CAF9C,wEAKA,uEAC2C,0CAD3C,oBAEM,0CAFN,gBAEsC,yCAFtC,UAIA,6DACiCD,EADjC,uBAC2D,IACxDD,EAAKG,KAAKC,UAFb,KAIA,6DACkC,IAChC,uBAAGC,KAAK,6CAAR,kCAFF,KAOA,kBAAC,OAAD,CAAMC,GAAG,KAAT,6BAMG,IAAMC,EAAQ,c,qICrBfC,G,UAAa,SAAC,GAAsB,IAApBF,EAAmB,EAAnBA,GAAIG,EAAe,EAAfA,SACxB,OACE,kBAAC,OAAD,CAAMC,YAAa,CAAEC,WAAY,KAAOL,GAAIA,GACzCG,KAKQG,EA1BA,kBACb,4BAAQC,UAAU,UAChB,yBACEA,UAAU,eACVC,MAAO,CACLC,OAAO,SACPC,UAAU,QACVC,SAAU,IACVC,QAAQ,wBAGV,kBAAC,EAAD,CAAYZ,GAAG,KAAf,SACA,kBAAC,EAAD,CAAYA,GAAG,UAAf,SACA,kBAAC,EAAD,CAAYA,GAAG,aAAf,e,UCsBSa,IAzBA,SAAC,GAAkB,IAAhBV,EAAe,EAAfA,SACVT,EAAI,OAUV,OACE,oCACE,kBAAC,EAAD,CAAQoB,UAAWpB,EAAKG,KAAKkB,aAAanB,QAC1C,6BACE,8BAAOO,O","file":"component---src-pages-using-typescript-tsx-f8a4ea41bc10c13ab3e1.js","sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport React from 'react';\nimport { PageProps, Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\ntype DataProps = {\n  site: {\n    buildTime: string;\n  };\n};\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({ data, path }) => (\n  <Layout>\n    <SEO title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\n      (like gatsby-node.js) currently don't support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>.tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{' '}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{' '}\n      <a href=\"https://www.gatsbyjs.org/docs/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n);\n\nexport default UsingTypescript;\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './header.css';\n\nconst Header = () => (\n  <header className=\"header\">\n    <div\n      className=\"header-links\"\n      style={{\n        margin: `0 auto`,\n        textAlign: `right`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem 0`,\n      }}\n    >\n      <HeaderLink to=\"/\">About</HeaderLink>\n      <HeaderLink to=\"/shelf\">Shelf</HeaderLink>\n      <HeaderLink to=\"/projects\">Projects</HeaderLink>\n    </div>\n  </header>\n);\n\nconst HeaderLink = ({ to, children }) => {\n  return (\n    <Link activeStyle={{ fontWeight: 500 }} to={to}>\n      {children}\n    </Link>\n  );\n};\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Header from './header/header';\nimport './layout.css';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div>\n        <main>{children}</main>\n      </div>\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n"],"sourceRoot":""}